<?php

namespace Charcoal\Property;

use PDO;

use RuntimeException;
use InvalidArgumentException;

// From Pimple
use Pimple\Container;

// From 'charcoal-property'
use Charcoal\Property\AbstractProperty;
use Charcoal\Property\SelectablePropertyInterface;
use Charcoal\Property\SelectablePropertyTrait;

/**
 * Template Selector Property
 */
class TemplateProperty extends AbstractProperty implements SelectablePropertyInterface
{
    use SelectablePropertyTrait {
        SelectablePropertyTrait::addChoice as addExtraChoice;
    }

    /**
     * The available selectable templates.
     *
     * @var array|null
     */
    private $templateChoices;

    /**
     * @return string
     */
    public function type()
    {
        return 'template';
    }

    /**
     * Inject dependencies from a DI Container.
     *
     * @param  Container $container A dependencies container instance.
     * @return void
     */
    public function setDependencies(Container $container)
    {
        parent::setDependencies($container);

        if (isset($container['config']['templates'])) {
            $this->templateChoices = $this->parseChoices($container['config']['templates']);
            $this->choices = $this->templateChoices;
        }
    }

    /**
     * Add a choice to the available choices map.
     *
     * @uses   SelectablePropertyTrait::addChoice()
     * @param  string       $choiceIdent The choice identifier (will be key / default ident).
     * @param  string|array $choice      A string representing the choice label or a structure.
     * @throws InvalidArgumentException If the choice identifier is not a string.
     * @return SelectablePropertyInterface Chainable.
     */
    public function addChoice($choiceIdent, $choice)
    {
        $templates = $this->templateChoices;

        if (is_string($choice)) {
            if (isset($templates[$choice])) {
                $this->choices[$choiceIdent] = $templates[$choice];

                return $this;
            }
        } elseif (is_array($choice)) {
            if (isset($choice['value'])) {
                $choiceIdent = (string)$choice['value'];
            } else {
                $choice['value'] = $choiceIdent;
            }

            if (isset($templates[$choiceIdent])) {
                $this->choices[$choiceIdent] = array_merge($templates[$choice], $choice);

                return $this;
            }
        }

        return $this->addExtraChoice($choiceIdent, $choice);
    }

    /**
     * Retrieve the selected template's fully-qualified class name.
     *
     * @return string|null
     */
    public function __toString()
    {
        $val = $this->val();
        $tpl = $this->choice($val);

        if (isset($tpl['class'])) {
            return $tpl['class'];
        }

        return null;
    }

    /**
     * @return string
     */
    public function sqlExtra()
    {
        return '';
    }

    /**
     * Get the SQL type (Storage format)
     *
     * Stored as `VARCHAR` for maxLength under 255 and `TEXT` for other, longer strings
     *
     * @return string The SQL type
     */
    public function sqlType()
    {
        // Multiple strings are always stored as TEXT because they can hold multiple values
        if ($this->multiple()) {
            return 'TEXT';
        }

        return 'VARCHAR(255)';
    }

    /**
     * @return integer
     */
    public function sqlPdoType()
    {
        return PDO::PARAM_STR;
    }
}

