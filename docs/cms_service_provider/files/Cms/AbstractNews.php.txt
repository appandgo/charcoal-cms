<?php

namespace Charcoal\Cms;

// Psr-7 dependencies
use \DateTime;
use \DateTimeInterface;
use \InvalidArgumentException;

// Depedencies from `charcoal-translator`
use \Charcoal\Translator\Translation;

// Dependencies from `charcoal-base`
use \Charcoal\Object\Content;
use \Charcoal\Object\CategorizableInterface;
use \Charcoal\Object\CategorizableTrait;
use \Charcoal\Object\PublishableInterface;
use \Charcoal\Object\PublishableTrait;
use \Charcoal\Object\RoutableInterface;
use \Charcoal\Object\RoutableTrait;

// Local dependencies
use Charcoal\Cms\Support\Helpers\DateHelper;

// Pimple dependencies
use Pimple\Container;

/**
 * News
 */
abstract class AbstractNews extends Content implements
    CategorizableInterface,
    MetatagInterface,
    NewsInterface,
    PublishableInterface,
    RoutableInterface,
    SearchableInterface,
    TemplateableInterface
{
    use CategorizableTrait;
    use PublishableTrait;
    use MetatagTrait;
    use RoutableTrait;
    use SearchableTrait;
    use TemplateableTrait;

    /**
     * @var array $config The news config.
     */
    protected $config;

    /**
     * @var DateHelper $dateHelper The date helper provider.
     */
    protected $dateHelper;

    /**
     * @var Translation $title
     */
    private $title;

    /**
     * @var Translation $title
     */
    private $subtitle;

    /**
     * @var Translation $title
     */
    private $summary;

    /**
     * @var Translation $content
     */
    private $content;

    /**
     * @var Translation $image
     */
    private $image;

    /**
     * @var DateTime $newsDate
     */
    private $newsDate;

    /**
     * @var Translation $infoUrl
     */
    private $infoUrl;

    /**
     * @var array
     */
    protected $keywords;

    // ==========================================================================
    // INIT
    // ==========================================================================

    /**
     * Section constructor.
     * @param array $data The data.
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        if (is_callable([ $this, 'defaultData' ])) {
            $this->setData($this->defaultData());
        }
    }

    /**
     * @param Container $container Pimple/Container.
     * @return void
     */
    public function setDependencies(Container $container)
    {
        parent::setDependencies($container);
        $this->config = $container['cms/config']->get('news_config');
        $this->dateHelper = $container['date/helper'];
    }

    // ==========================================================================
    // FUNCTIONS
    // ==========================================================================

    /**
     * In the datetime attribute of the <time> tag
     * @return string The datetime attribute formatted.
     */
    public function dateTimeDate()
    {
        $newsDate = $this->newsDate();

        return $newsDate->format('Y-m-d H:i:s');
    }

    /**
     * Some dates cannot be null
     * @return void
     */
    public function verifyDates()
    {
        if (!$this->newsDate()) {
            $this->setNewsDate('now');
        }

        if (!$this->publishDate()) {
            $this->setPublishDate('now');
        }

        if (!$this->expiryDate()) {
            if (isset($this->config['default_expiry'])) {
                $expiry_length = date_interval_create_from_date_string($this->config['default_expiry']);
                $date = clone $this->newsDate();
                date_add($date, $expiry_length);
                $this->setExpiryDate($date);
            }
        }
    }

    /**
     * @return string The date filtered for admin dual select input and others.
     */
    public function adminDateFilter()
    {
        return $this->dateHelper->formatDate(
            $this->newsDate(),
            'admin'
        );
    }

    // ==========================================================================
    // SETTERS
    // ==========================================================================

    /**
     * @param mixed $title The news title (localized).
     * @return NewsInterface
     */
    public function setTitle($title)
    {
        $this->title = $this->translator()->translation($title);

        return $this;
    }

    /**
     * @param mixed $subtitle The news subtitle (localized).
     * @return NewsInterface
     */
    public function setSubtitle($subtitle)
    {
        $this->subtitle = $this->translator()->translation($subtitle);

        return $this;
    }

    /**
     * @param mixed $summary The news summary (localized).
     * @return NewsInterface
     */
    public function setSummary($summary)
    {
        $this->summary = $this->translator()->translation($summary);

        return $this;
    }

    /**
     * @param mixed $content The news content (localized).
     * @return NewsInterface
     */
    public function setContent($content)
    {
        $this->content = $this->translator()->translation($content);

        return $this;
    }

    /**
     * @param mixed $image The section main image (localized).
     * @return NewsInterface
     */
    public function setImage($image)
    {
        $this->image = $this->translator()->translation($image);

        return $this;
    }

    /**
     * @param mixed $url The info URL (news source or where to find more information; localized).
     * @return NewsInterface
     */
    public function setInfoUrl($url)
    {
        $this->infoUrl = $this->translator()->translation($url);

        return $this;
    }

    /**
     * @param mixed $newsDate The news date.
     * @throws InvalidArgumentException If the timestamp is invalid.
     * @return NewsInterface
     */
    public function setNewsDate($newsDate)
    {
        if ($newsDate === null || $newsDate === '') {
            $this->newsDate = null;

            return $this;
        }
        if (is_string($newsDate)) {
            $newsDate = new DateTime($newsDate);
        }
        if (!($newsDate instanceof DateTimeInterface)) {
            throw new InvalidArgumentException(
                'Invalid "Revision Date" value. Must be a date/time string or a DateTimeInterface object.'
            );
        }
        $this->newsDate = $newsDate;

        return $this;
    }

    /**
     * Set the object's keywords.
     *
     * @param  string|string[] $keywords One or more entries.
     * @return self
     */
    public function setKeywords($keywords)
    {
        $this->keywords = $this->parseAsMultiple($keywords);

        return $this;
    }

    // ==========================================================================
    // GETTERS
    // ==========================================================================

    /**
     * MetatagTrait > canonical_url
     *
     * @return string
     * @todo
     */
    public function canonicalUrl()
    {
        return '';
    }

    /**
     * @return Translation
     */
    public function title()
    {
        return $this->title;
    }

    /**
     * @return Translation
     */
    public function subtitle()
    {
        return $this->subtitle;
    }

    /**
     * @return Translation
     */
    public function summary()
    {
        return $this->summary;
    }

    /**
     * @return Translation
     */
    public function infoUrl()
    {
        return $this->infoUrl;
    }

    /**
     * @return DateTime|null
     */
    public function newsDate()
    {
        return $this->newsDate;
    }

    /**
     * @return Translation
     */
    public function content()
    {
        return $this->content;
    }

    /**
     * @return Translation
     */
    public function image()
    {
        return $this->image;
    }

    /**
     * @return Translation
     */
    public function defaultMetaTitle()
    {
        return $this->title();
    }

    /**
     * @return Translation
     */
    public function defaultMetaDescription()
    {
        $content = $this->content();

        if ($content instanceof Translation) {
            foreach ($content->data() as $lang => $text) {
                $content[$lang] = strip_tags($text);
            }
        }

        return $content;
    }

    /**
     * @return Translation
     */
    public function defaultMetaImage()
    {
        return $this->image();
    }

    /**
     * Retrieve the object's keywords.
     *
     * @return string[]
     */
    public function keywords()
    {
        return $this->keywords;
    }

    // ==========================================================================
    // Utils
    // ==========================================================================

    /**
     * Parse the property value as a "multiple" value type.
     *
     * @param  mixed                    $value     The value being converted to an array.
     * @param  string|PropertyInterface $separator The boundary string.
     * @return array
     */
    public function parseAsMultiple($value, $separator = ',')
    {
        if (!isset($value) ||
            (is_string($value) && !strlen(trim($value))) ||
            (is_array($value) && !count(array_filter($value, 'strlen')))
        ) {
            return [];
        }

        /**
         * This property is marked as "multiple".
         * Manually handling the resolution to array
         * until the property itself manages this.
         */
        if (is_string($value)) {
            return explode($separator, $value);
        }

        /**
         * If the parameter isn't an array yet,
         * means we might be dealing with an integer,
         * an empty string, or an object.
         */
        if (!is_array($value)) {
            return [ $value ];
        }

        return $value;
    }

    // ==========================================================================
    // EVENTS
    // ==========================================================================

    /**
     * {@inheritdoc}
     *
     * @return boolean
     */
    public function preSave()
    {
        $this->verifyDates();
        $this->setSlug($this->generateSlug());

        return parent::preSave();
    }

    /**
     * {@inheritdoc}
     *
     * @param array $properties Optional properties to update.
     * @return boolean
     */
    public function preUpdate(array $properties = null)
    {
        $this->verifyDates();
        $this->setSlug($this->generateSlug());

        return parent::preUpdate($properties);
    }

    /**
     * @return boolean Parent postSave().
     */
    public function postSave()
    {
        // RoutableTrait
        $this->generateObjectRoute($this->slug());

        return parent::postSave();
    }

    /**
     * @param array|null $properties Properties.
     * @return boolean
     */
    public function postUpdate(array $properties = null)
    {
        // RoutableTrait
        $this->generateObjectRoute($this->slug());

        return parent::postUpdate($properties);
    }
}

